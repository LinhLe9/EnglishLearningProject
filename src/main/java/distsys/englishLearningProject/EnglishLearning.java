/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.englishLearningProject;

import distsys.englishLearningProject.newWordsService.NewWordsClient;
import distsys.englishLearningProject.scoreCalculateService.ScoreCalculateClient;
import distsys.englishLearningProject.testService.TestClient;
import generated.grpc.newwordsservice.WordDetail;
import generated.grpc.newwordsservice.WordList;
import generated.grpc.scorecalculateservice.ConvertedScore;
import generated.grpc.scorecalculateservice.FinalScore;
import generated.grpc.scorecalculateservice.SkillScore;
import generated.grpc.testservice.AverageScore;
import generated.grpc.testservice.ListeningQuestionOrScore;
import generated.grpc.testservice.ListeningResponse;
import generated.grpc.testservice.ListeningSound;
import generated.grpc.testservice.ReadingPassage;
import generated.grpc.testservice.ReadingQuestion;
import generated.grpc.testservice.ReadingQuestionOrScore;
import generated.grpc.testservice.ReadingResponse;
import generated.grpc.testservice.WritingQuestion;
import generated.grpc.testservice.WritingQuestionOrScore;
import generated.grpc.testservice.WritingResponse;
import io.grpc.stub.StreamObserver;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import java.net.URL;

import javax.swing.AbstractAction;
import javax.swing.*;
import java.awt.*;
//import java.awt.event.ActionEvent;
//import java.awt.event.ItemEvent;
//import java.awt.event.ItemListener;
import java.time.LocalTime;
import java.util.*;
//import java.util.concurrent.Executors;
//import java.util.concurrent.ScheduledExecutorService;
//import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
/**
 *
 * @author DELL
 */
public class EnglishLearning extends javax.swing.JFrame {
    int inputCount = 1;
    String soundPath;
    Stack<String> choice = new Stack<>();
    
    private Clip audioClip;
            
    
    // declare variables of each client
    private final NewWordsClient newWordClient;
    private final TestClient testClient;
    private final ScoreCalculateClient scoreClient;
    private String selectedAnswer = null;
    
    // declare the streaming used
    private StreamObserver<ReadingResponse> requestObserver;
    private StreamObserver<WritingResponse> requestWObserver;
    private StreamObserver<ListeningResponse> requestLObserver;
    private StreamObserver<SkillScore> requestScoreObserver;

    
    /**
     * Creates new form EnglishLearning
     */
    public EnglishLearning() {
        // starting the start screen
        initComponents();
        setupWelcomeScreen();
        connectMenuActions();
        showWelcomeScreen();
        
        // initiate the client
        newWordClient = new NewWordsClient();
        testClient = new TestClient();
        scoreClient = new ScoreCalculateClient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        welcomePanel = new javax.swing.JPanel();
        WelcomeLabel = new javax.swing.JLabel();
        topicPanel = new javax.swing.JPanel();
        topicLabel = new javax.swing.JLabel();
        TopicBox = new javax.swing.JComboBox<>();
        topicResult = new javax.swing.JScrollPane();
        topicTextArea = new javax.swing.JTextArea();
        wordPanel = new javax.swing.JPanel();
        wordEnter = new javax.swing.JLabel();
        wordEnterBox = new javax.swing.JTextField();
        wordResult = new javax.swing.JScrollPane();
        wordTextArea = new javax.swing.JTextArea();
        wordSearchButton = new javax.swing.JButton();
        readingPanel = new javax.swing.JPanel();
        RPassageScrollPane1 = new javax.swing.JScrollPane();
        RPassageTextArea = new javax.swing.JTextArea();
        RQuestionScrollPane1 = new javax.swing.JScrollPane();
        RQuestionTextArea = new javax.swing.JTextArea();
        optionA = new javax.swing.JRadioButton();
        optionB = new javax.swing.JRadioButton();
        optionC = new javax.swing.JRadioButton();
        optionD = new javax.swing.JRadioButton();
        nextButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IeltsScorePanel = new javax.swing.JPanel();
        IeltsScoreLabel = new javax.swing.JLabel();
        enterEleScore = new javax.swing.JTextField();
        SendScoreButton = new javax.swing.JButton();
        getOverallButton = new javax.swing.JButton();
        eleScoreLabel = new javax.swing.JLabel();
        IeltsScoreDes = new javax.swing.JLabel();
        IeltsScoreScroll = new javax.swing.JScrollPane();
        IeltsScoreResult = new javax.swing.JTextArea();
        EquivalentLabel = new javax.swing.JLabel();
        enterIELTSScore = new javax.swing.JTextField();
        EquivalentScroll = new javax.swing.JScrollPane();
        EquivalentResult = new javax.swing.JTextArea();
        EquivalentScoreDes = new javax.swing.JLabel();
        getEquipScoreButton = new javax.swing.JButton();
        writingPanel = new javax.swing.JPanel();
        WQuestionScrollPane = new javax.swing.JScrollPane();
        WQuestionTextArea = new javax.swing.JTextArea();
        WInputScroll = new javax.swing.JScrollPane();
        WInputTextArea = new javax.swing.JTextArea();
        nextWButton = new javax.swing.JButton();
        finishWButton = new javax.swing.JButton();
        listeningPanel = new javax.swing.JPanel();
        btnPlay = new javax.swing.JButton();
        LQuestionScrollPane = new javax.swing.JScrollPane();
        LQuestionTextArea = new javax.swing.JTextArea();
        LAnswerTextField = new javax.swing.JTextField();
        nextLButton = new javax.swing.JButton();
        finishLButton = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        NewWordsMenu = new javax.swing.JMenu();
        topicSearch = new javax.swing.JMenuItem();
        wordSearch = new javax.swing.JMenuItem();
        TestMenu = new javax.swing.JMenu();
        readingTest = new javax.swing.JMenuItem();
        writingTest = new javax.swing.JMenuItem();
        speakingTest = new javax.swing.JMenuItem();
        listeningTest = new javax.swing.JMenuItem();
        ScoreCalMenu = new javax.swing.JMenu();
        CalScore = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setLayout(new java.awt.CardLayout());

        WelcomeLabel.setText("Welcome");

        javax.swing.GroupLayout welcomePanelLayout = new javax.swing.GroupLayout(welcomePanel);
        welcomePanel.setLayout(welcomePanelLayout);
        welcomePanelLayout.setHorizontalGroup(
            welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanelLayout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(WelcomeLabel)
                .addContainerGap(324, Short.MAX_VALUE))
        );
        welcomePanelLayout.setVerticalGroup(
            welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(WelcomeLabel)
                .addContainerGap(205, Short.MAX_VALUE))
        );

        mainPanel.add(welcomePanel, "card2");

        topicLabel.setText("Topic");

        TopicBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        TopicBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopicBoxActionPerformed(evt);
            }
        });

        topicTextArea.setColumns(20);
        topicTextArea.setRows(5);
        topicResult.setViewportView(topicTextArea);

        javax.swing.GroupLayout topicPanelLayout = new javax.swing.GroupLayout(topicPanel);
        topicPanel.setLayout(topicPanelLayout);
        topicPanelLayout.setHorizontalGroup(
            topicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topicPanelLayout.createSequentialGroup()
                .addGroup(topicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topicPanelLayout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(topicLabel))
                    .addGroup(topicPanelLayout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(TopicBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(topicPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(topicResult, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        topicPanelLayout.setVerticalGroup(
            topicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topicLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TopicBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(topicResult, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        mainPanel.add(topicPanel, "card3");

        wordEnter.setText("Word");

        wordEnterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordEnterBoxActionPerformed(evt);
            }
        });

        wordTextArea.setColumns(20);
        wordTextArea.setRows(5);
        wordResult.setViewportView(wordTextArea);

        wordSearchButton.setText("Search");
        wordSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wordPanelLayout = new javax.swing.GroupLayout(wordPanel);
        wordPanel.setLayout(wordPanelLayout);
        wordPanelLayout.setHorizontalGroup(
            wordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wordEnter)
                    .addComponent(wordEnterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wordSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(wordResult, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        wordPanelLayout.setVerticalGroup(
            wordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wordResult, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(wordPanelLayout.createSequentialGroup()
                        .addComponent(wordEnter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordEnterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(wordSearchButton)))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        mainPanel.add(wordPanel, "card4");

        RPassageTextArea.setColumns(20);
        RPassageTextArea.setRows(5);
        RPassageScrollPane1.setViewportView(RPassageTextArea);

        RQuestionTextArea.setColumns(20);
        RQuestionTextArea.setRows(5);
        RQuestionScrollPane1.setViewportView(RQuestionTextArea);

        optionGroup.add(optionA);
        optionA.setText("A");
        optionA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionAActionPerformed(evt);
            }
        });

        optionGroup.add(optionB);
        optionB.setText("B");
        optionB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionBActionPerformed(evt);
            }
        });

        optionGroup.add(optionC);
        optionC.setText("C");
        optionC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionCActionPerformed(evt);
            }
        });

        optionGroup.add(optionD);
        optionD.setText("D");
        optionD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionDActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("READING TEST");

        jLabel2.setText("<html> \nPlease complete the<br>\nfollowing 20 questions <br> \nusing this passage \n</html> \n");

        javax.swing.GroupLayout readingPanelLayout = new javax.swing.GroupLayout(readingPanel);
        readingPanel.setLayout(readingPanelLayout);
        readingPanelLayout.setHorizontalGroup(
            readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, readingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(readingPanelLayout.createSequentialGroup()
                        .addComponent(RQuestionScrollPane1)
                        .addGap(28, 28, 28)
                        .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optionD)
                            .addGroup(readingPanelLayout.createSequentialGroup()
                                .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(optionA)
                                    .addComponent(optionB, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(optionC, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(finishButton))))
                        .addGap(34, 34, 34))
                    .addGroup(readingPanelLayout.createSequentialGroup()
                        .addComponent(RPassageScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))))
        );
        readingPanelLayout.setVerticalGroup(
            readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readingPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RPassageScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(readingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RQuestionScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addGroup(readingPanelLayout.createSequentialGroup()
                        .addGroup(readingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(readingPanelLayout.createSequentialGroup()
                                .addComponent(optionA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optionB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optionC))
                            .addGroup(readingPanelLayout.createSequentialGroup()
                                .addComponent(nextButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(finishButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optionD)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mainPanel.add(readingPanel, "card5");

        IeltsScoreLabel.setText("<html>IELTS OVERALL \nCALCULATION</html>");

        enterEleScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterEleScoreActionPerformed(evt);
            }
        });

        SendScoreButton.setText("Send");
        SendScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendScoreButtonActionPerformed(evt);
            }
        });

        getOverallButton.setText("Get Overall");
        getOverallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getOverallButtonActionPerformed(evt);
            }
        });

        eleScoreLabel.setText("Element Score");

        IeltsScoreDes.setText("<html> Please enter each component score <br> in the next field </html>\n");

        IeltsScoreResult.setColumns(20);
        IeltsScoreResult.setRows(5);
        IeltsScoreScroll.setViewportView(IeltsScoreResult);

        EquivalentLabel.setText("<html> IELTS <br> EQUIVALENT ENGLISH CERT </html>");

        enterIELTSScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterIELTSScoreActionPerformed(evt);
            }
        });

        EquivalentResult.setColumns(20);
        EquivalentResult.setRows(5);
        EquivalentScroll.setViewportView(EquivalentResult);

        EquivalentScoreDes.setText("<html> Please enter your IELTS score <br> in the field below </html>\n");
        EquivalentScoreDes.setToolTipText("");

        getEquipScoreButton.setText("Get");
        getEquipScoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEquipScoreButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IeltsScorePanelLayout = new javax.swing.GroupLayout(IeltsScorePanel);
        IeltsScorePanel.setLayout(IeltsScorePanelLayout);
        IeltsScorePanelLayout.setHorizontalGroup(
            IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IeltsScorePanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IeltsScorePanelLayout.createSequentialGroup()
                        .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(EquivalentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(enterIELTSScore)
                                .addComponent(EquivalentScoreDes, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                            .addComponent(getEquipScoreButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EquivalentScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(IeltsScoreScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IeltsScorePanelLayout.createSequentialGroup()
                        .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IeltsScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IeltsScoreDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eleScoreLabel)
                            .addComponent(enterEleScore, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(getOverallButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SendScoreButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(45, 45, 45))
        );
        IeltsScorePanelLayout.setVerticalGroup(
            IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IeltsScorePanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(IeltsScorePanelLayout.createSequentialGroup()
                        .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eleScoreLabel)
                            .addComponent(IeltsScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(IeltsScoreDes)
                            .addComponent(enterEleScore)))
                    .addGroup(IeltsScorePanelLayout.createSequentialGroup()
                        .addComponent(SendScoreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getOverallButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(IeltsScoreScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(IeltsScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IeltsScorePanelLayout.createSequentialGroup()
                        .addComponent(EquivalentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EquivalentScoreDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterIELTSScore, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getEquipScoreButton))
                    .addComponent(EquivalentScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        mainPanel.add(IeltsScorePanel, "card6");

        WQuestionTextArea.setColumns(20);
        WQuestionTextArea.setRows(5);
        WQuestionScrollPane.setViewportView(WQuestionTextArea);

        WInputTextArea.setColumns(20);
        WInputTextArea.setRows(5);
        WInputScroll.setViewportView(WInputTextArea);

        nextWButton.setText("Next");
        nextWButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextWButtonActionPerformed(evt);
            }
        });

        finishWButton.setText("Finish");
        finishWButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishWButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout writingPanelLayout = new javax.swing.GroupLayout(writingPanel);
        writingPanel.setLayout(writingPanelLayout);
        writingPanelLayout.setHorizontalGroup(
            writingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writingPanelLayout.createSequentialGroup()
                .addGroup(writingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(writingPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(writingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WQuestionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                            .addComponent(WInputScroll)))
                    .addGroup(writingPanelLayout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(nextWButton)
                        .addGap(38, 38, 38)
                        .addComponent(finishWButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        writingPanelLayout.setVerticalGroup(
            writingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writingPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(WQuestionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(WInputScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(writingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextWButton)
                    .addComponent(finishWButton))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        mainPanel.add(writingPanel, "card7");

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        LQuestionTextArea.setColumns(20);
        LQuestionTextArea.setRows(5);
        LQuestionScrollPane.setViewportView(LQuestionTextArea);

        nextLButton.setText("Next");
        nextLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextLButtonActionPerformed(evt);
            }
        });

        finishLButton.setText("Finish");
        finishLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishLButtonActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listeningPanelLayout = new javax.swing.GroupLayout(listeningPanel);
        listeningPanel.setLayout(listeningPanelLayout);
        listeningPanelLayout.setHorizontalGroup(
            listeningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listeningPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listeningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LAnswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(listeningPanelLayout.createSequentialGroup()
                        .addGroup(listeningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LQuestionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listeningPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(nextLButton)
                .addGap(44, 44, 44)
                .addComponent(finishLButton)
                .addGap(136, 136, 136))
        );
        listeningPanelLayout.setVerticalGroup(
            listeningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listeningPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listeningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listeningPanelLayout.createSequentialGroup()
                        .addComponent(btnPlay)
                        .addGap(10, 10, 10)
                        .addComponent(btnStop))
                    .addComponent(LQuestionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LAnswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(listeningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextLButton)
                    .addComponent(finishLButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        mainPanel.add(listeningPanel, "card8");

        NewWordsMenu.setText("New Words");

        topicSearch.setText("Search by Topic");
        topicSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicSearchActionPerformed(evt);
            }
        });
        NewWordsMenu.add(topicSearch);

        wordSearch.setText("Search by Word");
        NewWordsMenu.add(wordSearch);

        jMenuBar1.add(NewWordsMenu);

        TestMenu.setText("Test");

        readingTest.setText("Reading");
        readingTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readingTestActionPerformed(evt);
            }
        });
        TestMenu.add(readingTest);

        writingTest.setText("Writing");
        TestMenu.add(writingTest);

        speakingTest.setText("Speaking");
        TestMenu.add(speakingTest);

        listeningTest.setText("Listening");
        TestMenu.add(listeningTest);

        jMenuBar1.add(TestMenu);

        ScoreCalMenu.setText("Score Cal");

        CalScore.setText("Calculate Score");
        ScoreCalMenu.add(CalScore);

        jMenuBar1.add(ScoreCalMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void wordEnterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordEnterBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wordEnterBoxActionPerformed

    private void topicSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_topicSearchActionPerformed

    private void TopicBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopicBoxActionPerformed
        // TODO add your handling code here:
        showTopicResults();
    }//GEN-LAST:event_TopicBoxActionPerformed

    private void wordSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordSearchButtonActionPerformed
        // TODO add your handling code here:
        searchWord();
    }//GEN-LAST:event_wordSearchButtonActionPerformed

    private void readingTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readingTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readingTestActionPerformed

    private void optionAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionAActionPerformed
        // TODO add your handling code here:
//        handleOptionSelection(optionA);
        choice.push("A");
    }//GEN-LAST:event_optionAActionPerformed

    private void optionBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionBActionPerformed
        // TODO add your handling code here:
//        handleOptionSelection(optionB);
        choice.push("B");
    }//GEN-LAST:event_optionBActionPerformed

    private void optionCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionCActionPerformed
        // TODO add your handling code here:
//        handleOptionSelection(optionC);
        choice.push("C");
    }//GEN-LAST:event_optionCActionPerformed

    private void optionDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionDActionPerformed
        // TODO add your handling code here:
//        handleOptionSelection(optionD);
        choice.push("D");
    }//GEN-LAST:event_optionDActionPerformed

    private void SendScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendScoreButtonActionPerformed
        // TODO add your handling code here:
        try{
            String scoreText = enterEleScore.getText().trim();
            if (scoreText.isEmpty()) {
                IeltsScoreResult.setText("Please enter a valid score.");
                return;
            }
            double score = Double.parseDouble(scoreText);
            
            if ((score % 1 == 0.0 || score % 1 == 0.5) && (score >= 0.0 && score <= 9.0)) {
                requestScoreObserver.onNext(SkillScore.newBuilder().setScore(score).build());
                IeltsScoreResult.setText("Success enter the " + inputCount + " element score! Please enter the next element score");
                inputCount++;
            } else {
                IeltsScoreResult.setText("Invalid Score. Please enter the element score between 0.0 to 9.0 and in the format .0 or .5");
            }
            enterEleScore.setText("");
        }catch (NumberFormatException  e) {
            IeltsScoreResult.setText("Invalid input. Please enter a valid number.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_SendScoreButtonActionPerformed

    private void enterEleScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterEleScoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterEleScoreActionPerformed

    private void getOverallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getOverallButtonActionPerformed
        // TODO add your handling code here:
        requestScoreObserver.onCompleted();
    }//GEN-LAST:event_getOverallButtonActionPerformed

    private void getEquipScoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getEquipScoreButtonActionPerformed
        // TODO add your handling code here:
        getEquivalentScore();
    }//GEN-LAST:event_getEquipScoreButtonActionPerformed

    private void enterIELTSScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterIELTSScoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterIELTSScoreActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        try {
            if(choice.isEmpty()){
                JOptionPane.showMessageDialog(null, "Please chose your answer");
            } else {
            String answer = choice.peek();
            requestObserver.onNext(ReadingResponse.newBuilder().setAnswer(answer).build());
            choice.clear();
            optionGroup.clearSelection();
            selectedAnswer = null;
            }
        } catch (RuntimeException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        // TODO add your handling code here:
        requestObserver.onCompleted();
    }//GEN-LAST:event_finishButtonActionPerformed

    private void nextWButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextWButtonActionPerformed
       // TODO add your handling code here:
        try {
            String answer = WInputTextArea.getText();
            requestWObserver.onNext(WritingResponse.newBuilder().setAnswer(answer).build());
            WInputTextArea.setText("");
        } catch (RuntimeException e) {
            e.printStackTrace();
        }        
    }//GEN-LAST:event_nextWButtonActionPerformed

    private void finishWButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishWButtonActionPerformed
        // TODO add your handling code here:
        requestWObserver.onCompleted();
    }//GEN-LAST:event_finishWButtonActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // TODO add your handling code here:
        playAudio(soundPath);
    }//GEN-LAST:event_btnPlayActionPerformed

    private void nextLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextLButtonActionPerformed
        // TODO add your handling code here:
        try {
            String answer = LAnswerTextField.getText();
            requestLObserver.onNext(ListeningResponse.newBuilder().setAnswer(answer).build());
            LAnswerTextField.setText("");
        } catch (RuntimeException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_nextLButtonActionPerformed

    private void finishLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishLButtonActionPerformed
        // TODO add your handling code here:
        requestLObserver.onCompleted();
    }//GEN-LAST:event_finishLButtonActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        stopAudio();
    }//GEN-LAST:event_btnStopActionPerformed
    
    /* 
    Method to show the pannel linked with different menu bar and item  
    */
    private void connectMenuActions() {
        // connect with the word menu  
        topicSearch.addActionListener(e -> showTopicPanel());
        wordSearch.addActionListener(e -> showWordPanel());
        
        // connect with the test menu
        readingTest.addActionListener(e -> showReadingTestPanel());
        writingTest.addActionListener(e -> showWritingTestPanel());
        speakingTest.addActionListener(e -> showListeningTestPanel());
        listeningTest.addActionListener(e -> showTestPanel("Listening"));
        
        // connect with the Score Calculation menu
        CalScore.addActionListener(e -> showScorePanel());
    }

    // method to design the welcome screen
    private void setupWelcomeScreen() {
        WelcomeLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        WelcomeLabel.setForeground(new Color(0, 102, 204));
        WelcomeLabel.setHorizontalAlignment(SwingConstants.CENTER);
        setSize(600, 400);
        setLocationRelativeTo(null);
    }
    
    // method to show the welcome screen
    private void showWelcomeScreen() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "welcome");
    }

    // method to show the topic panel when the user choose topic search menu item
    private void showTopicPanel() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "card3");
        // call to update the topic combo box
        updateTopicList();
        // call to the client to get the result
        showTopicResults();
    }
    
    // Method to update the available topic in the database
    private void updateTopicList() {
        // declare a list to store the topic 
        java.util.List<String> item = newWordClient.getTopicRequest();
        if (item.isEmpty()) {
            System.err.println("No topics received!");
        } else {
            if (item == null || item.isEmpty()) {
                System.err.println("No topics received!");
                return;
            }
            TopicBox.removeAllItems();
            for (String topic : item) {
                TopicBox.addItem(topic);
            }

        }
    }
    
    private void showTopicResults() {
        String selectedTopic = (String) TopicBox.getSelectedItem();
        System.out.println("Selected topic: " + selectedTopic);
        if (selectedTopic == null || selectedTopic.isEmpty()) {
            System.err.println("Error: Selected Topic is NULL or EMPTY!");
            topicTextArea.setText("Please select a valid topic.");
        return;
        }
        // call the getWordsByTopic method of newWordClient 
        Iterator<WordList> responses = newWordClient.getWordsByTopic(selectedTopic);
        if (responses == null|| !responses.hasNext()) {
            System.err.println("Error: No response received!");
        topicTextArea.setText("No words found for this topic.");
        return;
        }
        StringBuilder resultString = new StringBuilder();
        topicTextArea.setText("Fetching words...");

        while (responses.hasNext()) {
            WordList wordDetail = responses.next();
            resultString.append(wordDetail.getWord()).append("\n")
                        .append(wordDetail.getPronunciation()).append(" : ")
                        .append(wordDetail.getDefinition()).append("\n\n");
            }
        topicTextArea.setText(resultString.toString()); 
    }

    // method to show the word panel when the user choose word search menu item
    private void showWordPanel() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "card4");
        // method to call to the client
        searchWord();
    }

    private void searchWord() {
        String word = wordEnterBox.getText().trim().toLowerCase();
        
        if (word.isEmpty()) {
            wordTextArea.setText("Please enter your word");
            return;
        }

        try {
            WordDetail response = newWordClient.getWordDefinition(word);
            if (response != null) {
                wordTextArea.setText(response.toString());
            } else {
                wordTextArea.setText("Word not found in the dictionary.");
            }
        } catch (io.grpc.StatusRuntimeException ex) {
            wordTextArea.setText("Word not found in the dictionary.");
            System.err.println("gRPC error: " + ex.getStatus());
        }
    }
    
    // method to show the reading test panel when the user choose reading test from menu item
    private void showReadingTestPanel() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "card5");
        showReadingTest();
    }
    
    private void showReadingTest() {
        SwingUtilities.invokeLater(() -> {
            // screen when waiting for the server
            RPassageTextArea.setText("Loading passage...");
            RQuestionTextArea.setText("Waiting for question...");
            
            // clear the group of option for starting the test
            optionGroup.clearSelection();
            selectedAnswer = null;
        });

        StreamObserver<ReadingQuestionOrScore> responseObserver = new StreamObserver<ReadingQuestionOrScore>() {
        
            @Override
            public void onNext(ReadingQuestionOrScore response) {
                SwingUtilities.invokeLater(() -> {
                    // if the onNext is passage, update the Passage area 
                    if (response.hasPassage()) {
                        ReadingPassage passage = response.getPassage();
                        RPassageTextArea.setText(passage.getContent());
                        System.out.println("DEBUG - Passage displayed: " + passage.getContent());
                    } 
                    
                    // if the onNext is question, update the Question area
                    else if (response.hasQuestion()) {
                        ReadingQuestion question = response.getQuestion();
                        RQuestionTextArea.setText(question.getQuestion());
                    }
                    
                    // if the onNext is final score, a JOptionPane message dialog pop up
                    else if (response.hasFinalScore()) {
                        JOptionPane.showMessageDialog(EnglishLearning.this,
                            "Test completed! Score: " + response.getFinalScore().getAverageScore());
                        System.out.println("DEBUG - score " + response.getFinalScore().getAverageScore());

                    }
                });
            }

            @Override
            public void onError(Throwable t) {
                SwingUtilities.invokeLater(() -> {
                    RPassageTextArea.setText("Error: " + t.getMessage());
                    t.printStackTrace();
                });
            }

            @Override
            public void onCompleted() {
                System.out.println("DEBUG - Stream completed");
            }
        };

        // Start the test
        requestObserver = testClient.getReadingTest(responseObserver);
    }
    
     // method to show the reading test panel when the user choose reading test from menu item
    private void showWritingTestPanel() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "card7");
        showWritingTest();
    }
    
    private void showWritingTest() {
        SwingUtilities.invokeLater(() -> {
            // screen when waiting for the server
            WQuestionTextArea.setText("Waiting for question...");
            WInputTextArea.setText("Enter your answer here...");
        });
        
        StreamObserver<WritingQuestionOrScore> responseWObserver = new StreamObserver<WritingQuestionOrScore>() {
            
            @Override
            public void onNext(WritingQuestionOrScore response) {
                SwingUtilities.invokeLater(() -> {
                    // if the onNext is question, update the Question area
                    if (response.hasQuestion()) {
                        WritingQuestion question = response.getQuestion();
                        WQuestionTextArea.setText(question.getQuestion());
                    }
                    
                    // if the onNext is final score, a JOptionPane message dialog pop up
                    else if (response.hasFinalScore()) {
                        JOptionPane.showMessageDialog(EnglishLearning.this,
                            "Test completed! Score: " + response.getFinalScore().getAverageScore());
                        System.out.println("DEBUG - score " + response.getFinalScore().getAverageScore());

                    }
                });
            }

            @Override
            public void onError(Throwable t) {
                SwingUtilities.invokeLater(() -> {
                    RPassageTextArea.setText("Error: " + t.getMessage());
                    t.printStackTrace();
                });
            }

            @Override
            public void onCompleted() {
                System.out.println("DEBUG - Stream completed");
            }
        };

        // Start the test
        requestWObserver = testClient.getWritingTest(responseWObserver);

    }
    
    private void showListeningTestPanel() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "card8");
        showListeningTest();
    }
    
    private void playAudio(String filePath) {
        try {
            if (audioClip != null && audioClip.isRunning()) {
                audioClip.stop();
                audioClip.close();
            }

            URL audioUrl = getClass().getResource(filePath);
            if (audioUrl == null) {
                throw new IllegalArgumentException("File not foudn: " + filePath);
            }

            AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioUrl);
            audioClip = AudioSystem.getClip();
            audioClip.open(audioStream);
            audioClip.start();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Can not play the audio: " + e.getMessage());
        }
    }
    
    private void stopAudio() {
        if (audioClip != null && audioClip.isRunning()) {
            audioClip.stop();
            audioClip.close();
        }
    }
    
    private void showListeningTest() {
        SwingUtilities.invokeLater(() -> {
            // screen when waiting for the server
            LQuestionTextArea.setText("Waiting for question...");
            LAnswerTextField.setText("Please enter your answer here...");
        });

        StreamObserver<ListeningQuestionOrScore> responseLObserver = new StreamObserver<ListeningQuestionOrScore>() {
        
            @Override
            public void onNext(ListeningQuestionOrScore response) {
                SwingUtilities.invokeLater(() -> {
                    // if the onNext is passage, update the Passage area 
                    if (response.hasSoundpath()) {
                        String path = response.getSoundpath().getSoundpath();
                        soundPath = "/audios/" + path;
                        System.out.println("DEBUG - AudioPath displayed: " + soundPath);
                    } 
                    
                    // if the onNext is question, update the Question area
                    else if (response.hasQuestion()) {
                        String question = response.getQuestion().getQuestion();
                        LQuestionTextArea.setText(question);
                    }
                    
                    // if the onNext is final score, a JOptionPane message dialog pop up
                    else if (response.hasFinalScore()) {
                        JOptionPane.showMessageDialog(EnglishLearning.this,
                            "Test completed! Score: " + response.getFinalScore().getAverageScore());
                        System.out.println("DEBUG - score " + response.getFinalScore().getAverageScore());

                    }
                });
            }

            @Override
            public void onError(Throwable t) {
                SwingUtilities.invokeLater(() -> {
                    RPassageTextArea.setText("Error: " + t.getMessage());
                    t.printStackTrace();
                });
            }

            @Override
            public void onCompleted() {
                System.out.println("DEBUG - Stream completed");
            }
        };

        // Start the test
        requestLObserver = testClient.getListeningTest(responseLObserver);
    }
    
    private void showTestPanel(String testType) {
        JOptionPane.showMessageDialog(this, "Đã chọn bài test: " + testType);
    }

    // method to show the score panel when the user choose score Calculation from menu item
    private void showScorePanel() {
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "card6");
        // call the calculateAverageScore method from client
        getOverallIelts();
        
        // call the convertToOtherScores method from client
        getEquivalentScore();
    }
    
    private void getOverallIelts (){
        StreamObserver<FinalScore> responseObserver = new StreamObserver<FinalScore>() {

            @Override
            public void onNext(FinalScore msg) {
                System.out.println(LocalTime.now().toString() + ": response from server " + msg.getAverageScore());
                double result = msg.getAverageScore();
                IeltsScoreResult.setText("" + result);
            }

            @Override
            public void onError(Throwable t) {
                t.printStackTrace();
            }

            @Override
            public void onCompleted() {
                System.out.println(LocalTime.now().toString() + ": stream is completed.");
            }

        };
        requestScoreObserver = scoreClient.calculateAverageScore(responseObserver);
        IeltsScoreResult.setText("Ready to accept values for average service");
    }
    
    private void getEquivalentScore(){
        try{
            String ieltsScoreText = enterIELTSScore.getText().trim();
            if (ieltsScoreText.isEmpty()) {
                EquivalentResult.setText("Please enter a valid score.");
                return;
            }
            double score = Double.parseDouble(ieltsScoreText);
            
            if ((score % 1 == 0.0 || score % 1 == 0.5) && (score >= 0.0 && score <= 9.0)) {
                Iterator<ConvertedScore> responses = scoreClient.convertToOtherScores(score);
                StringBuffer resultString = new StringBuffer();
                EquivalentResult.setText("");
                while (responses.hasNext()) {
                    ConvertedScore converted = responses.next();
                    resultString.append(converted.getCertificateName());
                    resultString.append(": ");
                    resultString.append(converted.getEquivalentScore());
                    resultString.append("\n");
                }
                EquivalentResult.setText(resultString.toString());
                
            } else {
                EquivalentResult.setText("Invalid Score. Please enter the IELTS score between 0.0 to 9.0 and in the format .0 or .5");
            }
        }catch (NumberFormatException  e) {
            IeltsScoreResult.setText("Invalid input. Please enter a valid number.");
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnglishLearning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnglishLearning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnglishLearning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnglishLearning.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnglishLearning().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CalScore;
    private javax.swing.JLabel EquivalentLabel;
    private javax.swing.JTextArea EquivalentResult;
    private javax.swing.JLabel EquivalentScoreDes;
    private javax.swing.JScrollPane EquivalentScroll;
    private javax.swing.JLabel IeltsScoreDes;
    private javax.swing.JLabel IeltsScoreLabel;
    private javax.swing.JPanel IeltsScorePanel;
    private javax.swing.JTextArea IeltsScoreResult;
    private javax.swing.JScrollPane IeltsScoreScroll;
    private javax.swing.JTextField LAnswerTextField;
    private javax.swing.JScrollPane LQuestionScrollPane;
    private javax.swing.JTextArea LQuestionTextArea;
    private javax.swing.JMenu NewWordsMenu;
    private javax.swing.JScrollPane RPassageScrollPane1;
    private javax.swing.JTextArea RPassageTextArea;
    private javax.swing.JScrollPane RQuestionScrollPane1;
    private javax.swing.JTextArea RQuestionTextArea;
    private javax.swing.JMenu ScoreCalMenu;
    private javax.swing.JButton SendScoreButton;
    private javax.swing.JMenu TestMenu;
    private javax.swing.JComboBox<String> TopicBox;
    private javax.swing.JScrollPane WInputScroll;
    private javax.swing.JTextArea WInputTextArea;
    private javax.swing.JScrollPane WQuestionScrollPane;
    private javax.swing.JTextArea WQuestionTextArea;
    private javax.swing.JLabel WelcomeLabel;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel eleScoreLabel;
    private javax.swing.JTextField enterEleScore;
    private javax.swing.JTextField enterIELTSScore;
    private javax.swing.JButton finishButton;
    private javax.swing.JButton finishLButton;
    private javax.swing.JButton finishWButton;
    private javax.swing.JButton getEquipScoreButton;
    private javax.swing.JButton getOverallButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel listeningPanel;
    private javax.swing.JMenuItem listeningTest;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton nextLButton;
    private javax.swing.JButton nextWButton;
    private javax.swing.JRadioButton optionA;
    private javax.swing.JRadioButton optionB;
    private javax.swing.JRadioButton optionC;
    private javax.swing.JRadioButton optionD;
    private javax.swing.ButtonGroup optionGroup;
    private javax.swing.JPanel readingPanel;
    private javax.swing.JMenuItem readingTest;
    private javax.swing.JMenuItem speakingTest;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JPanel topicPanel;
    private javax.swing.JScrollPane topicResult;
    private javax.swing.JMenuItem topicSearch;
    private javax.swing.JTextArea topicTextArea;
    private javax.swing.JPanel welcomePanel;
    private javax.swing.JLabel wordEnter;
    private javax.swing.JTextField wordEnterBox;
    private javax.swing.JPanel wordPanel;
    private javax.swing.JScrollPane wordResult;
    private javax.swing.JMenuItem wordSearch;
    private javax.swing.JButton wordSearchButton;
    private javax.swing.JTextArea wordTextArea;
    private javax.swing.JPanel writingPanel;
    private javax.swing.JMenuItem writingTest;
    // End of variables declaration//GEN-END:variables
}
